{"version":3,"sources":["Components/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Home","props","ref","React","createRef","id","className","href","title","target","rel","process","onClick","current","scrollIntoView","behavior","name","src","alt","social","map","item","i","key","url","App","useState","email","city","occupation","mainInfo","setMainInfo","useEffect","fetch","method","headers","then","r","json","jsonResponse","a","main","catch","err","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"oLAyDeA,MAtDf,SAAcC,GAEZ,IAAMC,EAAsBC,IAAMC,YAMlC,OACE,4BAAQC,GAAG,QAGT,yBAAKA,GAAG,YACN,uBAAGC,UAAU,aAAaC,KAAK,YAAYC,MAAM,mBAAjD,mBACA,uBAAGF,UAAU,aAAaC,KAAK,QAAQC,MAAM,mBAA7C,mBACA,wBAAIH,GAAG,MAAMC,UAAU,OACrB,4BAAI,uBAAGG,OAAO,SAASC,IAAI,sBACpBH,KAAMI,2BACNC,QAdM,WACnBV,EAAIW,QAAQC,eAAe,CAAEC,SAAU,aAW7B,aAQR,yBAAKT,UAAU,aAAaJ,IAAKA,GAC/B,yBAAKI,UAAU,eACb,wBAAIA,UAAU,uBAAd,OAA8CL,EAAMe,MACpD,4BACE,yBAAKV,UAAU,MAAMW,IAAKN,2CAAoDO,IAAI,KAClF,yBAAKZ,UAAU,MAAMW,IAAKN,2CAAoDO,IAAI,KAClF,yBAAKZ,UAAU,MAAMW,IAAKN,uCAAgDO,IAAI,KAC9E,yBAAKZ,UAAU,MAAMW,IAAKN,uCAAgDO,IAAI,MAEhF,+BAKJ,yBAAKZ,UAAU,UACb,wBAAIA,UAAU,UACXL,EAAMkB,OAAOC,KAAI,SAACC,EAAMC,GACvB,OAAQ,wBAAIC,IAAKD,GACf,uBAAGb,OAAO,SAASC,IAAI,sBAAsBH,KAAMc,EAAKG,KACtD,uBAAGlB,UAAWe,EAAKf,qBCJpBmB,MAtCf,WAAgB,IAAD,EACmBC,mBAAgB,CAC5CV,KAAM,GACNW,MAAO,SACPC,KAAM,SACNC,WAAY,GACZV,OAAQ,KANC,mBACNW,EADM,KACIC,EADJ,KA+Bb,OArBAC,qBAAU,WACRC,MAAMtB,oCACJ,CACEuB,OAAQ,MACRC,QAAS,CACP,eAAgB,mBAChB,OAAU,sBAGbC,MAAK,SAAAC,GACJ,OAAOA,EAAEC,UAEVF,MAAK,SAACG,GACL,IAAMC,EAAID,EAAaE,KACvBV,EAAYS,MAEbE,OAAM,SAAAC,GACLC,QAAQC,IAAIF,QAEf,IAGD,yBAAKrC,UAAU,OACb,kBAAC,EAASwB,KCzBIgB,QACW,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZJC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDmIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdlB,OAAM,SAAAmB,GACLjB,QAAQiB,MAAMA,EAAMC,a","file":"static/js/main.69f4224b.chunk.js","sourcesContent":["import React, { RefObject } from 'react';\nimport { IMain } from '../Models/Home';\n\nfunction Home(props: IMain) {\n\n  const ref: RefObject<any> = React.createRef();\n\n  const smoothScroll = () => {\n    ref.current.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  return (\n    <header id='home'>\n\n      {/* NAVIGATION BAR */}\n      <nav id='nav-wrap'>\n        <a className='mobile-btn' href='#nav-wrap' title='Show navigation'>Show navigation</a>\n        <a className='mobile-btn' href='#home' title='Hide navigation'>Hide navigation</a>\n        <ul id='nav' className='nav'>\n          <li><a target='_blank' rel='noopener noreferrer'\n                 href={process.env.PUBLIC_URL + '/CV.pdf'}\n                 onClick={smoothScroll}>Resume</a>\n          </li>\n        </ul>\n      </nav>\n\n      {/* MAIN CONTENT */}\n      <div className='row banner' ref={ref}>\n        <div className='banner-text'>\n          <h1 className='responsive-headline'>I&apos;m {props.name}</h1>\n          <h3>\n            <img className='svg' src={process.env.PUBLIC_URL + '/images/golang-icon.svg'} alt='' />\n            <img className='svg' src={process.env.PUBLIC_URL + '/images/python-icon.svg'} alt='' />\n            <img className='svg' src={process.env.PUBLIC_URL + '/images/js-icon.svg'} alt='' />\n            <img className='svg' src={process.env.PUBLIC_URL + '/images/ts-icon.svg'} alt='' />\n          </h3>\n          <hr />\n        </div>\n      </div>\n\n      {/* FOOTER */}\n      <div className='footer'>\n        <ul className='social'>\n          {props.social.map((item, i) => {\n            return (<li key={i}>\n              <a target='_blank' rel='noopener noreferrer' href={item.url}>\n                <i className={item.className}>\n                </i></a>\n            </li>);\n          })}\n        </ul>\n      </div>\n\n    </header>\n  );\n}\n\nexport default Home;\n","import React, { useEffect, useState } from 'react';\nimport Home from './Components/Home';\nimport { IMain } from './Models/Home';\n\nfunction App() {\n  const [mainInfo, setMainInfo] = useState<IMain>({\n      name: '',\n      email: 'string',\n      city: 'string',\n      occupation: '',\n      social: [],\n    },\n  );\n\n  useEffect(() => {\n    fetch(process.env.PUBLIC_URL + '/resumeData.json',\n      {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n        },\n      })\n      .then(r => {\n        return r.json();\n      })\n      .then((jsonResponse) => {\n        const a = jsonResponse.main as IMain;\n        setMainInfo(a);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }, []);\n\n  return (\n    <div className='App'>\n      <Home {...mainInfo} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n  ),\n);\n\n/* eslint-disable */\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n/* eslint-enable */\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}