{"version":3,"sources":["Components/About.tsx","Components/Header.tsx","Components/Footer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["About","props","id","className","src","process","alt","bio","name","address","street","city","zip","phone","email","Header","href","title","onClick","console","log","target","rel","occupation","description","social","map","item","i","key","url","Footer","App","useState","state","mainInfo","setMainInfo","useEffect","fetch","method","headers","then","r","json","jsonResponse","a","main","catch","err","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.bf187a59.chunk.js","sourcesContent":["import React from 'react';\nimport {IMain} from \"../Models/Header\";\n\nfunction About(props: IMain) {\n\n    return (<section id=\"about\">\n        <div className=\"row\">\n            <div className=\"two columns\">\n                <img className=\"profile-pic\" src={process.env.PUBLIC_URL + '/images/profilepic.jpg'}\n                     alt=\"All the rights, honours and privileges thereunto appertaining...\"/>\n            </div>\n            <div className=\"nine columns\">\n                <h2>About Me</h2>\n\n                <p>{props.bio}</p>\n                <div className=\"row\">\n                    <div className=\"columns contact-details\">\n                        <h2>Contact Details</h2>\n                        <p className=\"address\">\n                            <span>{props.name}</span><br/>\n                            <span>{props.address.street}<br/>\n                                {props.city}, {props.address.zip}\n                   </span><br/>\n                            <span>{props.phone}</span><br/>\n                            <span>{props.email}</span>\n                        </p>\n                    </div>\n\n                </div>\n\n            </div>\n\n        </div>\n\n    </section>)\n}\n\nexport default About;\n","import React from \"react\";\nimport {IMain} from \"../Models/Header\";\n\nfunction Header(props: IMain) {\n\n    const smoothScroll = () => {\n        console.log('on click!!!')\n\n    }\n\n    return (\n        <header id=\"home\">\n\n            <nav id=\"nav-wrap\">\n\n                <a className=\"mobile-btn\" href=\"#nav-wrap\" title=\"Show navigation\">Show navigation</a>\n                <a className=\"mobile-btn\" href=\"#home\" title=\"Hide navigation\">Hide navigation</a>\n\n                <ul id=\"nav\" className=\"nav\">\n                    <li className=\"current\">\n                        <a className=\"smoothscroll\" href=\"#home\" onClick={smoothScroll}>Home</a>\n                    </li>\n                    <li><a className=\"smoothscroll\" href=\"#about\">About</a></li>\n                    <li><a target=\"_blank\" rel=\"noopener noreferrer\"\n                           className=\"smoothscroll\" href={process.env.PUBLIC_URL + '/CV.pdf'}>Resume</a>\n                    </li>\n                </ul>\n\n            </nav>\n\n            <div className=\"row banner\">\n                <div className=\"banner-text\">\n                    <h1 className=\"responsive-headline\">I'm {props.name}</h1>\n                    <h3>I'm an {props.city} based\n                        <span> {props.occupation}</span>.\n                        &nbsp;{props.description}</h3>\n                    <hr/>\n                    <ul className=\"social\">\n                        {props.social.map((item, i) => {\n                            return (<li key={i}>\n                                <a target=\"_blank\" rel=\"noopener noreferrer\" href={item.url}>\n                                    <i className={item.className}>\n                                    </i></a>\n                            </li>)\n                        })}\n                    </ul>\n                </div>\n            </div>\n\n            <p className=\"scrolldown\">\n                <a className=\"smoothscroll\" href=\"#about\">\n                    <i className=\"icon-down-circle\"></i>\n                </a>\n            </p>\n\n        </header>\n    )\n}\n\nexport default Header;\n","import React from 'react';\nimport {IMain} from \"../Models/Header\";\n\nfunction Footer(props: IMain) {\n    return (\n        <footer>\n            <div className=\"row\">\n                <div className=\"twelve columns\">\n                    <ul className=\"social-links\">\n                        {props.social.map((item, i) => {\n                            return (<li key={i}>\n                                <a target=\"_blank\" rel=\"noopener noreferrer\" href={item.url}>\n                                    <i className={item.className}>\n                                    </i></a>\n                            </li>)\n                        })}\n                    </ul>\n\n                    <ul className=\"copyright\">\n                        <li>&copy; Copyright 2020 Mustafa Sencer Ã–zcan</li>\n                        <li>Design by <a title=\"Styleshout\" href=\"http://www.styleshout.com/\">Styleshout</a></li>\n                    </ul>\n\n                </div>\n                <div id=\"go-top\"><a className=\"smoothscroll\" title=\"Back to Top\" href=\"#home\">\n                    <i className=\"icon-up-open\"></i></a></div>\n            </div>\n        </footer>\n    );\n}\n\nexport default Footer;\n","import React, {useEffect, useState} from 'react';\nimport About from './Components/About';\nimport Header from './Components/Header';\nimport Footer from './Components/Footer';\nimport {IMain} from \"./Models/Header\";\n\nfunction App() {\n    const [mainInfo, setMainInfo] = useState<IMain>({\n        name: \"\",\n        bio: \"string\",\n        email: \"string\",\n        city: \"string\",\n        phone: \"string\",\n        description: \"\",\n        occupation: \"\",\n        social: [],\n        address: {street: \"\", state: \"\", zip: 0}\n    })\n\n    useEffect(() => {\n        fetch(process.env.PUBLIC_URL + '/resumeData.json', {method: \"GET\", headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }})\n            .then(r => {\n                return r.json()\n            })\n            .then((jsonResponse) => {\n                const a = jsonResponse.main as IMain\n                setMainInfo(a);\n            })\n            .catch(err => {\n                console.log(err)\n            })\n    }, [])\n\n    return (\n        <div className=\"App\">\n            <Header {...mainInfo}/>\n            <About {...mainInfo}/>\n            <Footer {...mainInfo}/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}